# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import raft_pb2 as raft__pb2


class raft_serviceStub(object):
    """python -m grpc_tools.protoc -I.\src\ProtoBufs  --python_out=.\src --pyi_out=.\src --grpc_python_out=.\src .\src\ProtoBufs\raft.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.appendEntry = channel.unary_unary(
                '/raft.raft_service/appendEntry',
                request_serializer=raft__pb2.AppendEntryRequest.SerializeToString,
                response_deserializer=raft__pb2.AppendEntryResponse.FromString,
                )
        self.requestVote = channel.unary_unary(
                '/raft.raft_service/requestVote',
                request_serializer=raft__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=raft__pb2.RequestVoteResponse.FromString,
                )
        self.serveClient = channel.unary_unary(
                '/raft.raft_service/serveClient',
                request_serializer=raft__pb2.ServeClientArgs.SerializeToString,
                response_deserializer=raft__pb2.ServeClientReply.FromString,
                )


class raft_serviceServicer(object):
    """python -m grpc_tools.protoc -I.\src\ProtoBufs  --python_out=.\src --pyi_out=.\src --grpc_python_out=.\src .\src\ProtoBufs\raft.proto

    """

    def appendEntry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serveClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_raft_serviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'appendEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.appendEntry,
                    request_deserializer=raft__pb2.AppendEntryRequest.FromString,
                    response_serializer=raft__pb2.AppendEntryResponse.SerializeToString,
            ),
            'requestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.requestVote,
                    request_deserializer=raft__pb2.RequestVoteRequest.FromString,
                    response_serializer=raft__pb2.RequestVoteResponse.SerializeToString,
            ),
            'serveClient': grpc.unary_unary_rpc_method_handler(
                    servicer.serveClient,
                    request_deserializer=raft__pb2.ServeClientArgs.FromString,
                    response_serializer=raft__pb2.ServeClientReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft.raft_service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class raft_service(object):
    """python -m grpc_tools.protoc -I.\src\ProtoBufs  --python_out=.\src --pyi_out=.\src --grpc_python_out=.\src .\src\ProtoBufs\raft.proto

    """

    @staticmethod
    def appendEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.raft_service/appendEntry',
            raft__pb2.AppendEntryRequest.SerializeToString,
            raft__pb2.AppendEntryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.raft_service/requestVote',
            raft__pb2.RequestVoteRequest.SerializeToString,
            raft__pb2.RequestVoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serveClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.raft_service/serveClient',
            raft__pb2.ServeClientArgs.SerializeToString,
            raft__pb2.ServeClientReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
